<?php

namespace Tests\Feature;

use App\Note;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * Class NotesControllerTest
 * @package Tests\Feature
 */
class NotesControllerTest extends TestCase {

    use RefreshDatabase, withFaker;

    /**
     * Typical note structure
     * @var array
     */
    private $note_structure = [
        'id',
        'user_id',
        'title',
        'body',
        'created_at',
        'updated_at',
        'author' => [],
    ];

    private $user = null;

    public function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed();

        // Create a new user to test with //
        $this->user = factory(User::class)->create();
    }

    /**
     * Gets paginated notes
     * @return void
     */
    public function testGetNotes(): void {

        $response = $this->actingAs($this->user)
                         ->getJson('/api/v1/notes');

        $response->assertStatus(200);

        $response->assertJsonStructure(
            [
                'current_page',
                'data' => [
                    '*' => $this->note_structure,
                ],
            ]
        );
    }

    /**
     * Gets a single note resource
     * @return void
     */
    public function testGetANote(): void {
        $response = $this->actingAs($this->user)
                         ->getJson('/api/v1/notes/1');

        $response->assertStatus(200);

        $response->assertJsonStructure($this->note_structure);
    }

    /**
     * Creates a note
     * @return void
     */
    public function testCreateANote(): void {
        $data = [
            'title' => $this->faker->sentence,
            'body' => $this->faker->paragraphs($this->faker->numberBetween(1, 5), true),
        ];

        $response = $this->actingAs($this->user)
                         ->postJson('/api/v1/notes', $data);

        $response->assertStatus(200);

        // Remove author from structure //
        unset($this->note_structure['author']);

        $response->assertJsonStructure($this->note_structure);
    }

    /**
     * Updates a random note
     * @return void
     */
    public function testUpdateANote(): void {
        // Get a random note and update it //
        $note = Note::all()->random();

        $data = [
            'id' => $note->id,
            'title' => $this->faker->sentence,
            'body' => $this->faker->paragraphs($this->faker->numberBetween(1, 5), true),
        ];

        $response = $this->actingAs($this->user)
                         ->putJson("/api/v1/notes/{$note->id}", $data);

        $response->assertStatus(201);

        // Check correct structure //
        $response->assertJsonStructure($this->note_structure);

        // Check update took affect //
        $response->assertJson(
            [
                'id' => $note->id,
                'title' => $data['title'],
                'body' => $data['body'],
            ]
        );
    }

    /**
     * Deletes a random note
     * @return void
     */
    public function testDestroyANote(): void {
        $note = Note::all()->random();

        $response = $this->actingAs($this->user)->deleteJson("/api/v1/notes/{$note->id}");

        $response->assertStatus(204);
    }
}
