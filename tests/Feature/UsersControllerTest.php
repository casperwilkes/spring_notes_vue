<?php

namespace Tests\Feature;

use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * Class UsersControllerTest
 * @package Tests\Feature
 */
class UsersControllerTest extends TestCase {

    use RefreshDatabase, WithFaker;

    private $user_structure = [
        'id',
        'name',
        'email',
        'created_at',
        'updated_at',
    ];

    /**
     * @var User|null
     */
    private $user = null;

    /**
     * Sets up the test
     */
    public function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed('TestSeeder');

        $this->user = factory(User::class)->create();
    }

    /**
     * Gets a paginated result set of users
     * @return void
     */
    public function testGetUsers(): void {
        $response = $this->actingAs($this->user)
                         ->getJson('/api/v1/users');

        $response->assertStatus(200);

        $response->assertJsonStructure(
            [
                'current_page',
                'data' => [
                    '*' => $this->user_structure,
                ],
            ]
        );
    }

    /**
     * Gets a random user
     * @return void
     */
    public function testGetAUser(): void {
        $user = User::all()->random();

        $response = $this->actingAs($this->user)
                         ->getJson("/api/v1/users/{$user->id}");

        $response->assertStatus(200);

        $response->assertJsonStructure($this->user_structure);
    }

    /**
     * Gets the currently logged in user
     * @return void
     */
    public function testGetThisUser(): void {
        $response = $this->actingAs($this->user)
                         ->getJson('/api/v1/user');

        $response->assertStatus(200);

        $response->assertJsonStructure($this->user_structure);
    }

    /**
     * Creates a user resource
     * @return void
     */
    public function testCreateAUser(): void {
        $data = [
            'name' => $this->faker->name,
            'email' => $this->faker->unique()->email,
            'password' => 'password',
            'password_confirmation' => 'password',
        ];

        $response = $this->postJson('register', $data);

        $response->assertStatus(201);
    }

    /**
     * Updates a random user resource
     * @return void
     */
    public function testUpdateAUser(): void {
        $user = User::all()->random();

        $data = [
            'id' => $user->id,
            'name' => $this->faker->name,
            'email' => $this->faker->unique()->email,
        ];

        $response = $this->actingAs($user)
                         ->putJson("api/v1/users/{$user->id}", $data);

        $response->assertStatus(202);

        $response->assertJsonStructure($this->user_structure);
        $response->assertJson(
            [
                'id' => $data['id'],
                'name' => $data['name'],
                'email' => $data['email'],
            ]
        );
    }

    /**
     * Deletes a user resource
     * @return void
     */
    public function testDeleteAUser(): void {
        $user = User::all()->random();

        $response = $this->actingAs($user)
                         ->deleteJson("api/v1/users/{$user->id}");

        $response->assertStatus(204);
    }
}
